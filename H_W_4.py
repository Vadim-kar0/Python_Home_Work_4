# Урок 4. Словари, множества и профилирование

# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества. 
# Затем пользователь вводит сами элементы множеств.


# n = int(input('кол-во элементов первого множества: '))
# m = int(input('кол-во элементов второго множества: '))

# n_lst = []
# m_lst = []
# for i in range(n):
#     n_lst.append(int(input("введите элемент первого массива ")))
# a = set(n_lst)
# for i in range(m):
#     m_lst.append(int(input("введите элемент второго массива ")))
# b = set(m_lst)
# c = list(a.intersection(b))

# def quicksort(array):
#     if len(array) < 2:
#         return array
#     else:
#         pivot = array[0]
#         less = [i for i in array[1:] if i <= pivot]
#         greater = [i for i in array[1:] if i > pivot]
#     return quicksort(less) + [pivot] + quicksort(greater)

# print(quicksort(c))


# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику.
# Она растёт на круглой грядке, причём кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло 
# различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход 
# собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.

# lst = [1,2,3,4,55,6,7,8]
# dct = {}
# for i in range(len(lst)):
#     if i == 0:
#         dct[i] = lst[i] + lst[i+1] + lst[-1]
#     if i == len(lst)-1:
#         dct[i] = lst[0] + lst[-2] + lst[-1]
#     else:
#         dct[i] = lst[i] + lst[i+1] + lst[i-1]

# max_val = max(dct.values())
# max_val_key = max(dct, key=dct.get)

# print("Максимальное количество ягод: ", max_val,"Расположены на кусту: ", max_val_key+1,"и соседних двух с ним")


